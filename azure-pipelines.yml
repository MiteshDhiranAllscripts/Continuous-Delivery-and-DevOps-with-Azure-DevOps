# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'fd44639a-cc79-432b-818a-49333873537f'
  imageRepository: 'releasepipelines'
  containerRegistry: 'demo12.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  

  # Kubernetes Namespace
  k8sNamespace: 'default'
  imagePullSecret: 'demo12b02d-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build job
    pool:
      name: Hosted Windows 2019 with VS2019
      demands:
      - msbuild
      - visualstudio
    steps:
      - task: NuGetToolInstaller@0
        displayName: 'Use NuGet 4.4.1'
        inputs:
          versionSpec: 4.4.1

      - task: NuGetCommand@2
        displayName: 'NuGet restore'
        inputs:
          restoreSolution: '$(Parameters.solution)'

      - task: VSBuild@1
        displayName: 'Build solution **\*.sln'
        inputs:
          solution: '$(Parameters.solution)'
          platform: '$(BuildPlatform)'
          configuration: '$(BuildConfiguration)'

      - task: DockerCompose@0
        displayName: 'Build services'
        inputs:
          azureSubscription: '$(Parameters.azureSubscriptionEndpoint)'
          azureContainerRegistry: '$(Parameters.azureContainerRegistry)'
          dockerComposeFile: '$(Parameters.dockerComposeFile)'
          additionalDockerComposeFiles: 'docker-compose.ci.yml'
          dockerComposeFileArgs: 'DOCKER_BUILD_SOURCE='
          action: 'Build services'
          additionalImageTags: '$(Build.BuildId)'

      - task: DockerCompose@0
        displayName: 'Push services'
        inputs:
          azureSubscription: '$(Parameters.azureSubscriptionEndpoint)'
          azureContainerRegistry: '$(Parameters.azureContainerRegistry)'
          dockerComposeFile: '$(Parameters.dockerComposeFile)'
          additionalDockerComposeFiles: 'docker-compose.ci.yml'
          dockerComposeFileArgs: 'DOCKER_BUILD_SOURCE='
          action: 'Push services'
          additionalImageTags: '$(Build.BuildId)'

      - task: DockerCompose@0
        displayName: 'Lock services'
        inputs:
          azureSubscription: '$(Parameters.azureSubscriptionEndpoint)'
          azureContainerRegistry: '$(Parameters.azureContainerRegistry)'
          dockerComposeFile: '$(Parameters.dockerComposeFile)'
          additionalDockerComposeFiles: 'docker-compose.ci.yml'
          dockerComposeFileArgs: 'DOCKER_BUILD_SOURCE='
          action: 'Lock services'
          outputDockerComposeFile: '$(Build.ArtifactStagingDirectory)/docker-compose.yml'

      - task: CopyFiles@2
        inputs:
          Contents: '**/docker-compose.env.yml
            **/docker-compose.env.*.yml
            **/musiscstore-deploy.yml'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: docker-compose'
        inputs:
          ArtifactName: 'docker-compose'
                
      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: 'manifests'
          targetPath: 'manifests'

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy job
    pool:
      vmImage: $(vmImageName)
    environment: 'ReleasePipelines.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@1
            inputs:
              artifactName: 'manifests'
              downloadPath: '$(System.ArtifactsDirectory)/manifests'

          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              namespace: $(k8sNamespace)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
              
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              namespace: $(k8sNamespace)
              manifests: |
                $(System.ArtifactsDirectory)/manifests/deployment.yml
                $(System.ArtifactsDirectory)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)
